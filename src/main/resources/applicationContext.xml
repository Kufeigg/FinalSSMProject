<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

    <!--配置读取jdbc.properties的工具类:PropertyPlacceHolderConfigurer-->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"></property>
        <property name="fileEncoding" value="utf-8" />
    </bean>

    <!--配置数据源:BasicDataSource-->
    <!-- 数据源：配置参数 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}" />
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="dbType" value = "mysql" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/><!-- 初始化连接数量 -->
        <property name="minIdle" value="${druid.minIdle}"/><!-- 最小空闲连接数量 -->
        <property name="maxActive" value="${druid.maxActive}"/><!-- 最大连接数量 -->

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/><!-- 最大建立连接等待时间(毫秒)。如果超过此时间将接到异常。设为－1表示无限制-->

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="validationQueryTimeout" value="${druid.validationQueryTimeout}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" /><!--空闲时是否进行验证，检查对象是否有效 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}" /><!--取得对象时是否进行验证，检查对象是否有效 -->
        <property name="testOnReturn" value="${druid.testOnReturn}" /><!--返回对象时是否进行验证 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <property name="logAbandoned" value="${druid.logAbandoned}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 oracle=true mysql=false -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" /><!-- 表明是否开启statement cache，默认为false，也就是不开启 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" /><!-- statement cache的大小，默认为-1，也就是不限制 -->

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" /><!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计   -->
    </bean>


    <!-- session 工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 用于连接数据库的数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 指定Mybatis的配置文件位置 -->
        <property name="configLocation" value="classpath:mybatis.xml" />
        <!-- 注册类（bean）的别名，该属性可以配置多个，可以用,;\t\n进行分割，不支持ant通配符 -->
        <property name="typeAliasesPackage" value="com.java.pojo"/>
        <!-- 配置映射文件，该路径支持多个，可以用,;\t\n进行分割，支持ant通配符 -->
        <property name="mapperLocations" value="classpath:com/java/mapper/" >

        </property>
    </bean>


    <!--将mapper的接口类与Mybatis的局部xml文件关联:MapperScannerConfigurer-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定mapper接口类的位置-->
        <property name="basePackage" value="com.java.mapper"></property>
    </bean>

    <!--配置事务-->
    <!--++++++++++++++++++++++++++++++++ 事务配置 +++++++++++++++++++++++++++++++-->
    <!-- 事务：声明管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 数据层配置，自动扫描，由 MapperScannerConfigurer自动生成 mapper bean -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.java.dao" />
    </bean>

    <!-- 自动扫描业务包 -->
    <context:component-scan base-package="com.java.service" />

    <context:component-scan base-package="com.java.controller"/>



</beans>
